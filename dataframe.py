# -*- coding: utf-8 -*-
"""DataFrame.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u92MyRtaQ1J3PSQcC8PzoHb__M5BSaw2
"""

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from datetime import time
DataOriginal= pd.read_csv("radiaciÃ³n solar - SPEC.csv")
DataOriginal
import folium
import libpysal as ps
import geopandas as gpd
from mpl_toolkits.axes_grid1 import make_axes_locatable

DataOriginal= DataOriginal.rename(columns={'4': 'index termporal', 'Paralela Bosque': 'Lugar' , 'Bucaramanga':'Locacion','Wunderground':'Estacion','7.080521':'Latitud','-73.110565':'Longitud','239.8':'Magnitud','2018-03-13T12:25':'Fecha/Hora'})
DataOriginal['Fecha/Hora']=pd.to_datetime( DataOriginal['Fecha/Hora'])
DataOriginal



DataAgrupada= pd.DataFrame(columns=["Lugar","Locacion",'Estacion','Latitud','Longitud','Magnitud','Fecha','Hora'])

DataAgrupada["Lugar"]=DataOriginal["Lugar"]
DataAgrupada["Locacion"]=DataOriginal["Locacion"]
DataAgrupada["Estacion"]=DataOriginal["Estacion"]
DataAgrupada["Latitud"]=DataOriginal["Latitud"]
DataAgrupada["Longitud"]=DataOriginal["Longitud"]
DataAgrupada["Magnitud"]=DataOriginal["Magnitud"]
DataAgrupada["Fecha"]=DataOriginal['Fecha/Hora'].dt.date
DataAgrupada["Hora"]=DataOriginal['Fecha/Hora'].dt.time

DataAgrupada

muestrasort=DataAgrupada.sort_values("Fecha")
muestrasort

DataAgrupada.to_csv(r'DatosReOrdenados.csv')

DataAgrupada["Hora"] =  pd.to_datetime(DataAgrupada["Hora"], format='%H:%M:%S')
DataAgrupada["Fecha"] =  pd.to_datetime(DataAgrupada["Fecha"])

DataAgrupada=DataAgrupada[(DataAgrupada['Hora']>= pd.to_datetime( "13:00:00" , format='%H:%M:%S')) & (DataAgrupada['Hora'] <pd.to_datetime( "14:00:00" , format='%H:%M:%S'))]
DataAgrupada["Hora"]=DataAgrupada['Hora'].dt.time

DataAgrupada

DataAgrupada.to_csv(r'DatosReOrdenados.csv')
ColumnaFechas= DataAgrupada["Fecha"].drop_duplicates()

Estaciones= DataAgrupada["Lugar"]
Estaciones=Estaciones.sort_values().drop_duplicates()

ColumnaFechas.sort_values()
DatosAtipivos = pd.DataFrame()

for l in Estaciones:



    DataAgrupada2=DataAgrupada[(DataAgrupada['Lugar']==l)]


    for i in ColumnaFechas:
        Datosremporales=DataAgrupada2[(DataAgrupada2['Fecha']== i) ]


        Datosremporales= Datosremporales.sort_values("Magnitud")

        if(Datosremporales["Magnitud"].size>2):
            Datosremporales = Datosremporales.reset_index()


            Ecuacion1= (Datosremporales["Magnitud"].size+ 1)/4

            Ecuacion3=3*((Datosremporales["Magnitud"].size+ 1)/4)

            if int(Ecuacion1)!=Ecuacion1:
                if(int(Ecuacion1)>=0 and int(Ecuacion1)<1 ):
                    Q1=Datosremporales["Magnitud"][int(Ecuacion1)]+ (Ecuacion1-int(Ecuacion1)) * (Datosremporales["Magnitud"][int(Ecuacion1)+1]-Datosremporales["Magnitud"][int(Ecuacion1)])
                else:
                     Q1=Datosremporales["Magnitud"][int(Ecuacion1)-1]+ (Ecuacion1-int(Ecuacion1))*(Datosremporales["Magnitud"][int(Ecuacion1)]-Datosremporales["Magnitud"][int(Ecuacion1)-1])



            else:
                if (int(Ecuacion1) >= 0 and int(Ecuacion1) < 1):
                    Q1 = Datosremporales["Magnitud"][int(Ecuacion1)]
                else:
                    Q1 = Datosremporales["Magnitud"][int(Ecuacion1) - 1]


            if int(Ecuacion1)!=Ecuacion1:
                if (int(Ecuacion3) >= 0 and int(Ecuacion3) < 1):
                    Q3=Datosremporales["Magnitud"][int(Ecuacion3)] + (Ecuacion3 - int(Ecuacion3)) * (
                                Datosremporales["Magnitud"][int(Ecuacion3) + 1] - Datosremporales["Magnitud"][int(Ecuacion3)])


                else:
                    Q3 = Datosremporales["Magnitud"][int(Ecuacion3) - 1] + (Ecuacion3 - int(Ecuacion3)) * (Datosremporales["Magnitud"][int(Ecuacion3)] - Datosremporales["Magnitud"][int(Ecuacion3) - 1])
            else:
                if (int(Ecuacion3) >= 0 and int(Ecuacion3) < 1):
                    Q3 = Datosremporales["Magnitud"][int(Ecuacion3)]


                else:

                    Q3 = Datosremporales["Magnitud"][int(Ecuacion3) - 1]



            IQR= Q3-Q1
            LimI= Q1-(1.5*(IQR))
            LimS = Q3 +  (1.5 * (IQR))

            ciclo=Datosremporales["Magnitud"].size

            cont=0

            for j in range(0, ciclo):



                a=Datosremporales["Magnitud"][j]


                if((a<=LimI or a>=LimS) and (a!=Datosremporales["Magnitud"][0]  and  a!=Datosremporales["Magnitud"][Datosremporales["Magnitud"].size -1])):


                    DatosAtipivos=DatosAtipivos.append(Datosremporales.iloc[[j]])





DatosAtipivos
DataAgrupadaGraficar=DataAgrupada[(DataAgrupada["Fecha"]>=pd.to_datetime( "2018:09:12" , format='%Y:%m:%d'))& (DataAgrupada["Fecha"]<=pd.to_datetime( "2018:09:25" , format='%Y:%m:%d'))]


DataAgrupadaGraficar=DataAgrupadaGraficar[DataAgrupadaGraficar["Lugar"]=="Paralela Bosque"]


DatosAtipivos[:50]

plt.figure(figsize=(11,11))
sns.boxplot(x=DataAgrupadaGraficar["Fecha"],y=DataAgrupadaGraficar["Magnitud"],showfliers= True)
plt.xticks(rotation=90)
plt.show

DataAgrupada=DataAgrupada.drop(DatosAtipivos['index'])

DatosAtipivos.to_csv(r'DatosAtipicos.csv')
DatosAtipivos


DatosAtipivos

DataAgrupada
DatosAtipivos
DatosAtipivos=DatosAtipivos.reset_index()



del DatosAtipivos["level_0"]

del DatosAtipivos["index"]

DatosAtipivos

Datostipicos=DataAgrupada.copy()
DatosTotal= pd.DataFrame(columns=["Lugar","Locacion",'Estacion','Latitud','Longitud','Magnitud','Fecha','Hora'])



for i in range(0, (DatosAtipivos["Magnitud"].size)):



    reemplzar= DatosAtipivos.iloc[i]


    x=str( reemplzar["Hora"])
    x=x[0:5]
    x=x.replace(":","")

    x=int(x)


    DatosLagrange= DataAgrupada[DataAgrupada["Lugar"]==DatosAtipivos.iloc[i,0] ]
    DatosLagrange=DatosLagrange[DatosLagrange["Fecha"]==DatosAtipivos.iloc[i,6]]

    DatosLagrange = DatosLagrange.sort_values("Hora")
    DatosLagrange=DatosLagrange.reset_index()
    del DatosLagrange["index"]






    vectorxi=[]

    vectorfxi=[]

    for l in range(0, DatosLagrange["Fecha"].size):

        hora=str( DatosLagrange.iloc[l,7])
        hora=hora[0:5]
        hora=hora.replace(":","")
        hora=int(hora)
        magnitud = DatosLagrange.iloc[l, 5]


        if hora in vectorxi:
            continue

        else:
            vectorxi.append(hora)
            vectorfxi.append(magnitud)

    grado=len(vectorxi)
    total=0



    for m in range(0, grado):

        acumulado=1
        for n in range(0,grado):
            if(m!=n):

                resultado=  ((x-vectorxi[n])/(vectorxi[m]-vectorxi[n]))
                acumulado=acumulado*resultado
        acumulado=acumulado*vectorfxi[m]
        total=total+acumulado

    if total < 0 or total > 3 * max(vectorfxi):

        cont=0
        x1=0
        x0=0
        fx1=0
        fx0=0

        for p in vectorxi:
            if p>x:
                x1=p
                fx1 = vectorfxi[cont]
                posicionantes = cont - 1
                try:
                    x0=vectorxi[cont]

                    fx0=vectorfxi[posicionantes]
                except:
                    x0 = 0
                    fx0 = 0

            cont+=1
        try:
                total= fx0 + (((fx1-fx0)/(x1-x0))*(x-x0))
        except:
            total= max(vectorfxi)-2


        if total<0:
            total= fx0-2
        elif total>3 * max(vectorfxi):
            total=fx0+2
    print(total)


    DatosArreglados = pd.DataFrame(
        columns=["Lugar", "Locacion", 'Estacion', 'Latitud', 'Longitud', 'Magnitud', 'Fecha', 'Hora'],data=[[reemplzar["Lugar"],reemplzar["Locacion"],reemplzar["Estacion"],reemplzar["Latitud"],reemplzar["Longitud"],total,reemplzar["Fecha"],reemplzar["Hora"]]])


    DatosTotal=DatosTotal.append(DatosArreglados,ignore_index=True)

DatosTotal

frames=[Datostipicos,DatosTotal]
resultado=pd.concat(frames)
resultado

resultado=resultado.reset_index()
del resultado["index"]

resultado

DataAgrupadaGraficar=resultado[(resultado["Fecha"]>=pd.to_datetime( "2018:09:12" , format='%Y:%m:%d'))& (resultado["Fecha"]<=pd.to_datetime( "2018:09:25" , format='%Y:%m:%d'))]


DataAgrupadaGraficar=DataAgrupadaGraficar[DataAgrupadaGraficar["Lugar"]=="Paralela Bosque"]

plt.figure(figsize=(12,12))
sns.boxplot(x=DataAgrupadaGraficar["Fecha"],y=DataAgrupadaGraficar["Magnitud"],showfliers = False)
plt.xticks(rotation=90)
plt.show()

resultado.to_csv(r'DatosCorregidos.csv')
print(resultado["Lugar"].value_counts())

CopiaDeLaBase=resultado



del CopiaDeLaBase["Hora"]

CopiaDeLaBase

datosOctubre=CopiaDeLaBase[(CopiaDeLaBase["Fecha"]>= pd.to_datetime( "2016:10:1" , format='%Y:%m:%d')) &  (CopiaDeLaBase["Fecha"]<=pd.to_datetime( "2016:10:31" , format='%Y:%m:%d'))  ]
datosOctubre

print(datosOctubre["Lugar"].value_counts())
datosOctubre

datosMarzo=CopiaDeLaBase[(CopiaDeLaBase["Fecha"]>= pd.to_datetime( "2016:3:1" , format='%Y:%m:%d')) &  (CopiaDeLaBase["Fecha"]<= pd.to_datetime( "2016:3:31" , format='%Y:%m:%d'))  ]
print(datosMarzo["Lugar"].value_counts())
datosMarzo

del CopiaDeLaBase["Fecha"]
del CopiaDeLaBase["Magnitud"]



CopiaDeLaBase=CopiaDeLaBase.drop_duplicates()
CopiaDeLaBase

def interpolacionEspacial(distancias, magnitudes, b):
    sumatoria_numerador = 0
    sumatoria_denominador = 0

    dato_minimo = 0
    dato_maximo = 0

    for i in range(0, len(distancias)):

        sumatoria_numerador = sumatoria_numerador + magnitudes[i] / distancias[i] ** b
        sumatoria_denominador = sumatoria_denominador + 1 / distancias[i] ** b

        if (i == 0):
            dato_minimo = sumatoria_numerador

        if (i == (len(distancias) - 1)):
            dato_maximo = magnitudes[i] / distancias[i] ** b

    s_j = sumatoria_numerador / sumatoria_denominador

    if ((s_j > dato_minimo) and (s_j < dato_maximo)):

        return s_j

    else:

        interpolacionEspacial(distancias, magnitudes, b + 1)

diccionarioOctubre={"Paralela Bosque":0.807 ,"UPB - Piedecuesta":5.88,"Norte":8.78,"Ciudadela":3.9,"Florida":0.483,"Centro": 5.4}
diccionarioMartzo={"Paralela Bosque":1.28 ,"UPB - Piedecuesta":7.42 ,"Norte":6.99,"Ciudadela":2.03,"Florida":2.28,"Centro": 3.58}
def reolverInterpolacion (dataframe, diccionario):
    Datosappend = pd.DataFrame(
        columns=["Lugar", "Locacion", 'Estacion', 'Latitud', 'Longitud', 'Magnitud', 'Fecha'])
    estacion=dataframe["Lugar"].drop_duplicates()
    for esta in estacion:
        datospuntuales= dataframe[dataframe["Lugar"]==esta]
        fechas= datospuntuales["Fecha"].drop_duplicates()
        for fec in fechas:

            datosespecificos= datospuntuales[datospuntuales["Fecha"]==fec]
            reemplzar = datosespecificos.iloc[0]
            promedio= datosespecificos["Magnitud"].mean()

            Datostemp = pd.DataFrame(
                columns=["Lugar", "Locacion", 'Estacion', 'Latitud', 'Longitud', 'Magnitud', 'Fecha'], data=[
                    [reemplzar["Lugar"], reemplzar["Locacion"], reemplzar["Estacion"], reemplzar["Latitud"],
                     reemplzar["Longitud"], promedio, reemplzar["Fecha"]]])
            Datosappend=Datosappend.append(Datostemp,ignore_index=True)



    fechasEspacial= Datosappend["Fecha"].drop_duplicates()
    dataresultante=pd.DataFrame(columns=["Fecha","Resultado"])
    for fechEs in  fechasEspacial:
        seleccioninterpolar= Datosappend[Datosappend["Fecha"]==fechEs]
        seleccioninterpolar=seleccioninterpolar.sort_values("Magnitud")



        distancias=[]

        lugarDistancias=seleccioninterpolar["Lugar"]
        for lg in lugarDistancias:
            distancias.append(diccionario[str(lg)])
        magnitudes=seleccioninterpolar["Magnitud"].to_numpy()


        total=interpolacionEspacial(distancias,magnitudes,0)
        datalista=pd.DataFrame(columns=["Fecha","Resultado"],data=[[fechEs,total]])
        dataresultante=dataresultante.append(datalista,ignore_index=True)
    return dataresultante

interpolacionOctubre=reolverInterpolacion(datosOctubre,diccionarioOctubre)

promedioOctubre= interpolacionOctubre["Resultado"].mean()
print(datosOctubre["Lugar"].value_counts())
print("El resultado de la interpolaciÃ³n de Octubre es:")
interpolacionOctubre

print("El promedio de la radiacion solar es: " +str(promedioOctubre))

interpolacionMarzo=reolverInterpolacion(datosMarzo,diccionarioMartzo)

promedioMarzo= interpolacionMarzo["Resultado"].mean()
print(datosMarzo["Lugar"].value_counts())
print("El resultado de la interpolaciÃ³n de Marzo es:")
interpolacionMarzo

print("El promedio de la radiacion solar es: " +str(promedioMarzo))

m = folium.Map(location=[7.080521, -73.110565], zoom_start=12)

folium.Marker(
    [7.080521, -73.110565], popup="Paralela Bosque"
).add_to(m)
folium.Marker(
    [7.038574, -73.069649], popup="UPB - Piedecuesta"
).add_to(m)
folium.Marker(
    [7.105772, -73.123730], popup="Ciudadela"
).add_to(m)
folium.Marker(
    [7.119262, -73.127154], popup="Centro"
).add_to(m)
folium.Marker(
    [7.149110, -73.134533], popup="Norte"
).add_to(m)
folium.Marker(
    [7.072035, -73.106186], popup="Florida"
).add_to(m)
m

m = folium.Map(location=[7.080521, -73.110565], zoom_start=12)

folium.Marker(
    [7.080521, -73.110565], popup="Paralela Bosque"
).add_to(m)
folium.Marker(
    [7.038574, -73.069649], popup="UPB - Piedecuesta"
).add_to(m)
folium.Marker(
    [7.105772, -73.123730], popup="Ciudadela"
).add_to(m)
folium.Marker(
    [7.119262, -73.127154], popup="Centro"
).add_to(m)
folium.Marker(
    [7.149110, -73.134533], popup="Norte"
).add_to(m)
folium.Marker(
    [7.072035, -73.106186], popup="Florida"
).add_to(m)
folium.Marker(
    [7.08526045, -73.1192428760099], popup="INEM - Custodio GarcÃ­a Rovira", icon=folium.Icon(color="red", icon="info-sign")
).add_to(m)




m

m = folium.Map(location=[7.080521, -73.110565], zoom_start=12)

folium.Marker(
    [7.080521, -73.110565], popup="Paralela Bosque"
).add_to(m)
folium.Marker(
    [7.038574, -73.069649], popup="UPB - Piedecuesta"
).add_to(m)
folium.Marker(
    [7.105772, -73.123730], popup="Ciudadela"
).add_to(m)
folium.Marker(
    [7.119262, -73.127154], popup="Centro"
).add_to(m)
folium.Marker(
    [7.149110, -73.134533], popup="Norte"
).add_to(m)
folium.Marker(
    [7.072035, -73.106186], popup="Florida"
).add_to(m)
folium.Marker(
    [7.0731729, -73.109957], popup="Clinica Foscal", icon=folium.Icon(color="red", icon="info-sign")
).add_to(m)




m

def resolverPromedio (dataframe):
    Datosappend = pd.DataFrame(
        columns=["Lugar", "Locacion", 'Estacion', 'Latitud', 'Longitud', 'Magnitud', 'Fecha'])
    estacion=dataframe["Lugar"].drop_duplicates()
    for esta in estacion:
        datospuntuales= dataframe[dataframe["Lugar"]==esta]
        fechas= datospuntuales["Fecha"].drop_duplicates()
        for fec in fechas:

            datosespecificos= datospuntuales[datospuntuales["Fecha"]==fec]
            reemplzar = datosespecificos.iloc[0]
            promedio= datosespecificos["Magnitud"].mean()

            Datostemp = pd.DataFrame(
                columns=["Lugar", "Locacion", 'Estacion', 'Latitud', 'Longitud', 'Magnitud', 'Fecha'], data=[
                    [reemplzar["Lugar"], reemplzar["Locacion"], reemplzar["Estacion"], reemplzar["Latitud"],
                     reemplzar["Longitud"], promedio, reemplzar["Fecha"]]])
            Datosappend=Datosappend.append(Datostemp,ignore_index=True)
    return  Datosappend

del CopiaDeLaBase["Locacion"]
del CopiaDeLaBase["Estacion"]
CopiaDeLaBase

mapa=  gpd.GeoDataFrame(
    datosOctubre, geometry=gpd.points_from_xy(datosOctubre["Longitud"], datosOctubre["Latitud"]))

mapa

mapa.plot(column='Magnitud', scheme='quantiles', k=3, cmap='OrRd', edgecolor='k', legend=True, figsize=(10,10))

mapa=  gpd.GeoDataFrame(
    datosMarzo, geometry=gpd.points_from_xy(datosMarzo["Longitud"], datosMarzo["Latitud"]))

mapa

mapa.plot(column='Magnitud', scheme='quantiles', k=3, cmap='OrRd', edgecolor='k', legend=True,figsize=(10,10))

Datosappend = pd.DataFrame(
        columns=["Lugar", "Locacion", 'Estacion', 'Latitud', 'Longitud', 'Magnitud', 'Fecha'])

Datosappend["Magnitud"]=interpolacionOctubre["Resultado"]
Datosappend["Fecha"]=interpolacionOctubre["Fecha"]

Datosappend["Lugar"]="Clinica Foscal"
Datosappend["Locacion"]="Florida"
Datosappend["Estacion"]="Wunderground"
Datosappend["Latitud"]=7.0731729
Datosappend["Longitud"]=-73.109957

Datosappend

datosOctubre= datosOctubre.append(Datosappend,ignore_index=True)

del datosOctubre["geometry"]
datosOctubre

mapa=  gpd.GeoDataFrame(
    datosOctubre, geometry=gpd.points_from_xy(datosOctubre["Longitud"], datosOctubre["Latitud"]))

mapa

mapa.plot(column='Magnitud', scheme='quantiles', k=3, cmap='OrRd', edgecolor='k', legend=True,figsize=(10,10))

Datosappend = pd.DataFrame(
        columns=["Lugar", "Locacion", 'Estacion', 'Latitud', 'Longitud', 'Magnitud', 'Fecha'])

Datosappend["Magnitud"]=interpolacionOctubre["Resultado"]
Datosappend["Fecha"]=interpolacionOctubre["Fecha"]

Datosappend["Lugar"]="INEM - Custodio GarcÃ­a Rovira"
Datosappend["Locacion"]="Florida"
Datosappend["Estacion"]="Wunderground"
Datosappend["Latitud"]=7.08526045
Datosappend["Longitud"]=-73.1192428760099

Datosappend

datosMarzo= datosMarzo.append(Datosappend,ignore_index=True)

del datosMarzo["geometry"]
datosMarzo

mapa=  gpd.GeoDataFrame(
    datosMarzo, geometry=gpd.points_from_xy(datosMarzo["Longitud"], datosMarzo["Latitud"]))

mapa

mapa.plot(column='Magnitud', scheme='quantiles', k=3, cmap='OrRd', edgecolor='k', legend=True,figsize=(10,10))